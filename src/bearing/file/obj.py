# -*- coding: utf-8 -*-
"""Provides OBJ Class."""

from datetime import datetime
import os


class OBJWriter(object):
    """A class used to represent a OBJ File."""

    def __init__(self):
        """Init."""
        self._vertices_idx = {}
        self.vertices = []
        self.faces = []

    def append_triangle(self, p0, p1, p2):
        """Append triangle."""
        f = [p0, p1, p2]
        face = []
        for vertex in f:
            if vertex in self._vertices_idx:
                face.append(self._vertices_idx[vertex])
            else:
                self.vertices.append(vertex)
                vertex_id = len(self.vertices)
                self._vertices_idx[vertex] = vertex_id
                face.append(vertex_id)
        self.faces.append([face])

    def dump(self, file_handle, header = True):
        """Dump to file_handle."""
        if header:
            file_handle.write("\n")
            file_handle.write("# Generated by '{}' (at {})\n".format(os.pathbasename(__file__),
                                                                     datetime.now()))
            file_handle.write("\n")
        for vertex in self.vertices:
            file_handle.write("v {0[0]} {0[1]} {0[2]}\n".format(vertex))
        for facet in self.faces:
            for ring in facet:
                file_handle.write("f {0}\n".format(" ".join([str(v) for v in ring])))

    def test_something(self):
        """Test Method."""
        pass


def test():
    """Test Function."""
    pass


if __name__ == '__main__':
    """Main"""
    import doctest
    doctest.testmod()
    test()
